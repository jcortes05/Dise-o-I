#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>
#include <math.h>
#include <MAX30105.h>
#include "spo2_algorithm.h"
#include "heartRate.h"
#include <WiFi.h>
#include <PubSubClient.h>


// Pantalla OLED
Adafruit_SSD1306 display(128, 64, &Wire, -1);


// WiFi y MQTT
const char* ssid = "Vargas xD";
const char* password = "de24elmadrid";
const char* mqtt_server = "broker.hivemq.com"; //broker.hivemq.com test.mosquitto.org

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      client.subscribe("inTopic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}



// Sensor MAX30102
int PinoNTC = 34;
double Vs = 3.3;
double R1 = 10000;
double Beta = 3950;
double To = 298.15;
double Ro = 10000;
double adcMax = 4095.0;

MAX30105 particleSensor;
uint32_t irBuffer[100]; // Infrared LED sensor data
uint32_t redBuffer[100]; // Red LED sensor data
int32_t bufferLength; // Data length
int32_t spo2; // calculo SP02
int8_t validSPO2; // INDICA SI LA LECTURA ES VALIDA ( 1  valido o 0 invalido )
int32_t heartRate; // calculo BPM
int8_t validHeartRate; // INDICA SI LA LECTURA ES VALIDA ( 1  valido o 0 invalido )

void setup() {
  Serial.begin(115200);

  // Inicializar WiFi
  setup_wifi();
  client.setServer(mqtt_server, 1883);

  // Inicializar pantalla OLED
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.display();
  display.clearDisplay();

  // Inicializar MAX30102
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) {
    Serial.println(F("Error al leer sensor"));
    while (1);
  }

  byte ledBrightness = 50;// Options: 0=Off to 255=50mA
  byte sampleAverage = 4;// Options: 1, 2, 4, 8, 16, 32
  byte ledMode = 2;// Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
  byte sampleRate = 100; // Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 411; // Options: 69, 118, 215, 411
  int adcRange = 4096;// Options: 2048, 4096, 8192, 16384

  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange);
}

void loop() {
  // Mostrar datos en el display OLED
  display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Sensor de temperatura
  double adc = analogRead(PinoNTC);
  double Vout = adc * Vs / adcMax;
  double Rt = R1 * Vout / (Vs - Vout);
  double T = 1 / (1 / To + log(Rt / Ro) / Beta);
  double Tc = T - 273.15;

  // Sensor MAX30102
  bufferLength = 100;// SI QUEREMOS TOMAR MAS MUESTRAS CAMBIAMOS ESTE VALOR
  for (byte i = 0; i < bufferLength; i++) {
    while (particleSensor.available() == false) {// HAY NUEVOS DATOS?
      particleSensor.check();// REVISAMOS SENSOR POR SI HAY NUEVOS DATOS
    }
    redBuffer[i] = particleSensor.getRed();
    irBuffer[i] = particleSensor.getIR();
    particleSensor.nextSample();// REVISAMOS LA MUESTRA ACTUAL Y LUEGO NOS MOVEMOS A LA SIGUIENTE
  }
  // Calcular frecuencia cardíaca y SpO2 después de los primeros 100 muestras (primeros 4 segundos de muestras)
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);

  // Mostrar datos en OLED
  display.clearDisplay();
  if (validHeartRate && validSPO2) {
    display.setCursor(0, 10);
    display.setTextSize(1);
    display.print("SpO2: ");
    display.println(spo2);
    display.print("BPM: ");
    display.println(heartRate);
    display.print("Temp (C): ");
    display.println(Tc);
    display.display();
  } else {
    display.println("Invalido BPM e Invalido SpO2");
    display.display();
  }

  // Enviar datos por MQTT
  unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    client.publish("/spo2", String(spo2).c_str());
    client.publish("/bpm", String(heartRate).c_str());
    client.publish("/temp", String(Tc).c_str());
  }
  display.display();
  delay(2000);
}
